{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","lireweb3","useState","count","setCount","instance","setInstance","balance","setBalance","beneficiaire","setBeneficaire","montant","setMontant","a","web3","Web3","givenProvider","window","ethereum","enable","eth","getAccounts","accounts","net","getId","networkid","deployer","Enockcoin","networks","mycontract","Contract","abi","address","afficherbalance","methods","balanceOf","call","bal","tranferertoken","e","preventDefault","transfer","send","from","className","type","onClick","src","logo","alt","onSubmit","onChange","currentTarget","value","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0pvMAAe,MAA0B,iC,4CCoF1BA,MA9Ef,WAGMC,qBAAU,WAERC,MACA,IAGF,MAAuBC,qBAAvB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA6BF,qBAA7B,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA2BJ,qBAA3B,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,qBAApC,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA2BR,qBAA3B,mBAAOS,EAAP,KAAeC,EAAf,KACMX,EAAQ,uCAAC,oCAAAY,EAAA,6DAEHC,EAAM,IAAIC,IAAKA,IAAKC,eAFjB,SAGFC,OAAOC,SAASC,SAHd,uBAIcL,EAAKM,IAAIC,cAJvB,cAIHC,EAJG,OAKTlB,EAASkB,GALA,SAMcR,EAAKM,IAAIG,IAAIC,QAN3B,OAMHC,EANG,OAOHC,EAAUC,EAAUC,SAASH,GAE7BI,EAAY,IAAIf,EAAKM,IAAIU,SAASH,EAAUI,IAAKL,GAAYA,EAASM,SAC5E1B,EAAYuB,GAVH,4CAAD,qDAeRI,EAAe,uCAAE,4BAAApB,EAAA,sEAEDR,EAAS6B,QAAQC,UAAUhC,EAAM,IAAIiC,OAFpC,OAEdC,EAFc,OAGrB7B,EAAW6B,GAHU,2CAAF,qDAOfC,EAAc,uCAAC,WAAMC,GAAN,SAAA1B,EAAA,6DACjB0B,EAAEC,iBADe,SAEXnC,EAAS6B,QAAQO,SAAShC,EAAaE,GAAS+B,KAAK,CAACC,KAAKxC,EAAM,KAFtD,2CAAD,sDASxB,OACE,sBAAKyC,UAAU,MAAf,UACCzC,EACC,yBAAQyC,UAAU,aAAlB,UACI,sDAAyBrC,EAAzB,OACA,wBAAQsC,KAAK,SAASC,QAASb,EAA/B,iCACF,qBAAKc,IAAKC,EAAMJ,UAAU,WAAWK,IAAI,SAEvC,uBAAOC,SAAUZ,EAAjB,UACI,uBAAOO,KAAK,OAAOM,SAAU,SAAAZ,GAAC,OAAE7B,EAAe6B,EAAEa,cAAcC,UAC/D,uBAAOR,KAAK,OAAOM,SAAU,SAAAZ,GAAC,OAAE3B,EAAW2B,EAAEa,cAAcC,UAC3D,mDAIN,sCACO,8CADP,0BAGA,mBACET,UAAU,WACVU,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,gCCzDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ff412479.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React,{useEffect,useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport Enockcoin from './contracts/Enockcoin.json';\nfunction App() {\n\n\n      useEffect(()=>{\n\n        lireweb3();\n      },[])\n\n\n      const [count,setCount]=useState();\n      const [instance,setInstance]=useState();\n      const [balance,setBalance]=useState();\n      const [beneficiaire,setBeneficaire]=useState();\n      const [montant,setMontant]=useState();\n      const lireweb3=async()=>{\n\n            const web3= new Web3(Web3.givenProvider);\n            await  window.ethereum.enable();\n            const accounts= await  web3.eth.getAccounts();\n            setCount(accounts);\n            const networkid= await web3.eth.net.getId();\n            const deployer= Enockcoin.networks[networkid];\n\n            const mycontract= new web3.eth.Contract(Enockcoin.abi, deployer && deployer.address);\n            setInstance(mycontract);            \n\n      }\n\n\n      const afficherbalance= async()=>{\n\n         const bal=   await instance.methods.balanceOf(count[0]).call();\n        setBalance(bal)\n\n      }\n\n      const tranferertoken=async(e)=>{\n          e.preventDefault();\n          await instance.methods.transfer(beneficiaire,montant).send({from:count[0]})\n\n      }\n\n   \n\n  \n  return (\n    <div className=\"App\">\n    {count}\n      <header className=\"App-header\">\n          <p>Votre balance est :  {balance} </p>\n          <button type=\"button\" onClick={afficherbalance} >Verifer la balance </button>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <form  onSubmit={tranferertoken}>\n              <input type=\"text\" onChange={e=>setBeneficaire(e.currentTarget.value)}/>\n              <input type=\"text\" onChange={e=>setMontant(e.currentTarget.value)}/>\n              <button>Transferer</button>\n          \n          </form>\n\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n     \n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}